Question Name,Question Description,Question Declaration,Question Solution,Question Tests,Original Question
Largest prime factor,"Given a number N, the task is to find the largest prime factor of that number.
 Example 1:
Input:
N = 5
Output:
5
Explanation:
5 has 1 prime factor i.e 5 only.
Example 2:
Input:
N = 24
Output:
3
Explanation:
24 has 2 prime factors 2 and 3 in which 3 is greater.
Your Task:
You don't need to read input or print anything. Your task is to complete the function largestPrimeFactor() which takes an integer N as input parameters and returns an integer, largest prime factor of N.
Expected Time Complexity: O(sqrt(N))
Expected Space Complexity: O(1)
Constraints:
2 <= N <= 109
","def largestPrimeFactor(N):
    """"""
    type N: int
    type return: int
    """"""
    pass

","def largestPrimeFactor_answer(N):
    """"""
    type N: int
    type return: int
    """"""
    num = 2
    # loop till sqrt(N)
    while (num * num) <= N:
        if N % num == 0:  # if num divides N evenly
            N = N // num  # divide N by num
        else:
            num += 1  # increase num if it doesn't divide N
    return int(N)
","test_cases = [
    (5,),   # Expected: 5, Test Passed
    (24,),  # Expected: 3, Test Passed
    (15,),  # Expected: 5, Test Passed
    (7,),   # Expected: 7, Test Passed
    (49,),  # Expected: 7, Test Passed
    (50,),  # Expected: 5, Test Passed
    (97,),  # Expected: 97, Test Passed
    (1,),   # Expected: Failed: N < 2, Invalid input
    (1000000007,),  # Expected: 1000000007, Test Passed
    (1024,)  # Expected: 2, Test Passed
]

user_solution = largestPrimeFactor
solution = largestPrimeFactor_answer",Prime Number
Sum of all prime numbers between 1 and N.,"You are given a positive integer N, return the sum of all prime numbers between 1 and N(inclusive).
 
Example 1:
Input: N = 5
Output: 10
Explanation: 2, 3, and 5 are prime
numbers between 1 and 5(inclusive), and their sum is 2 + 3 + 5 = 10.
Example 2:
Input: N = 10
Output: 17
Explanation: 2, 3, 5 and 7 are prime
numbers between 1 and 10(inclusive), and their sum is 2 + 3 + 5 + 7 = 17.
 
Your Task:
You don't need to read or print anything. Your task is to complete the function prime_Sum() which takes integer N as an input parameter and returns the sum of all primes between 1 and N(inclusive).
 
Expected Time Complexity: O(N*log(log(N)))
Expected Space Complexity: O(N)

Constraints:
1 <= N <= 1000000
","def prime_Sum(N):
    """"""
    type N: int
    type return: int
    """"""
    pass

","def prime_Sum_answer(N):
    """"""
    type N: int
    type return: int
    """"""
    # initializing a sieve array to mark prime numbers.
    sieve = [True] * (N + 1)
    sieve[0] = False
    sieve[1] = False

    # variable to store the total sum of prime numbers.
    tot = 0

    # iterating over numbers to mark non-prime numbers.
    for i in range(2, int(N**0.5) + 1):
        for j in range(i * 2, N + 1, i):
            sieve[j] = False

    # calculating the total sum of prime numbers.
    for i in range(N + 1):
        tot += i if sieve[i] else 0

    return tot

","test_cases = [
    (5,),   # Expected: 5, Test Passed
    (24,),  # Expected: 3, Test Passed
    (15,),  # Expected: 5, Test Passed
    (7,),   # Expected: 7, Test Passed
    (49,),  # Expected: 7, Test Passed
    (50,),  # Expected: 5, Test Passed
    (97,),  # Expected: 97, Test Passed
    (1,),   # Expected: Failed: N < 2, Invalid input
    (1000000007,),  # Expected: 1000000007, Test Passed
    (1024,)  # Expected: 2, Test Passed
]

user_solution = prime_Sum
solution = prime_Sum_answer",Prime Number
Pairs of prime number,"Find all pairs (sets) of prime numbers (p,q) such that p*q <= n, where n is given number.
 
Example 1:
Input: n = 4
Output: 2 2
Explanation: Pair (2, 2) which has both prime 
numbers as well as satisfying the condition 
2*2 <= 4.
Example 2:
Input: n = 8
Output: 2 2 2 3 3 2
Explanation: Pairs(2, 2), (2, 3) and (3, 2)
which has both prime numbers and satisfying
the given condition.
 
Your Task:
You don't need to read or print anything. Your task is to complete the function prime_pairs() which takes n as input parameter and returns a list of pairs in ascending order.
 
Expected Time Complexity: O(n2* sqrt(n))
Expected Space Complexity: O(1)
 
Constraints:
1 <= n <= 400
","def prime_pairs(n):
    """"""
    type n: int
    type return: List[int]
    """"""
    pass
","def is_prime(x):
    if x <= 1:
        return False
    for i in range(2, int(x**0.5) + 1):
        if x % i == 0:
            return False
    return True

def prime_pairs_answer(n):
    """"""
    type n: int
    type return: List[int]
    """"""
    res = []
    for i in range(2, n + 1):
        if is_prime(i):
            for j in range(2, n // i + 1):
                if is_prime(j):
                    res.append(i)
                    res.append(j)
    return res
","test_cases = [
    (1,),   # Expected: [], Test Passed
    (4,),   # Expected: [2, 2], Test Passed
    (8,),   # Expected: [2, 2, 2, 3, 3, 2], Test Passed
    (10,),  # Expected: [2, 2, 2, 3, 3, 2, 2, 5, 5, 2], Test Passed
    (15,),  # Expected: [2, 2, 2, 3, 3, 2, 2, 5, 5, 2, 3, 5, 5, 3], Test Passed
    (25,),  # Expected: [2, 2, 2, 3, 3, 2, 2, 5, 5, 2, 3, 5, 5, 3, 2, 7, 7, 2, 3, 7, 7, 3, 5, 5], Test Passed
    (0,),   # Expected: [], Test Passed
    (400,), # Expected: [2, 2, 2, 3, 3, 2, ..., 31, 13], Test Passed
    (399,), # Expected: [2, 2, 2, 3, 3, 2, ..., 31, 13], Test Passed
    (20,)   # Expected: [2, 2, 2, 3, 3, 2, 2, 5, 5, 2, 3, 5, 5, 3, 2, 7, 7, 2, 3, 7, 7, 3], Test Passed
]


user_solution = prime_pairs
solution = prime_pairs_answer",Prime Number
LCM And GCD,"Given two integers a and b, write a function lcmAndGcd() to compute their LCM and GCD. The function takes two integers a and b as input and returns a list containing their LCM and GCD.
Example 1:
Input: a = 5 , b = 10
Output: 10 5
Explanation: LCM of 5 and 10 is 10, while thier GCD is 5.
Input: a = 14 , b = 8
Output: 56 2
Explanation: LCM of 14 and 8 is 56, while thier GCD is 2.
Expected Time Complexity: O(log(min(a, b)))
Expected Auxiliary Space: O(1)
Constraints:
1 <= a, b <= 109
","def lcmAndGcd(a, b):
    """"""
    type a: int
    type b: int
    type return: List[int]
    """"""
    pass
","import math

def lcmAndGcd_answer(a, b):
    """"""
    type a: int
    type b: int
    type return: List[int]
    """"""
    arr = [0] * 2 

    g = math.gcd(a, b)   # gcd of 2 numbers.
    l = (a * b) // g     # product of 2 numbers divided by their gcd gives their lcm.

    arr[0], arr[1] = l, g

    return arr
","test_cases = [
    (5, 10),   # Expected: [10, 5], Test Passed
    (14, 8),   # Expected: [56, 2], Test Passed
    (1, 1),   # Expected: [1, 1], Test Passed
    (1000000000, 2),   # Expected: [1000000000, 2], Test Passed
    (13, 7),   # Expected: [91, 1], Test Passed
    (9, 6),    # Expected: [18, 3], Test Passed
    (0, 5),    # Expected: Error/Failure, Invalid input (a = 0)
    (1000000000, 1000000000),   # Expected: [1000000000, 1000000000], Test Passed
    (1, 1000000000),   # Expected: [1000000000, 1], Test Passed
    (50, 75)  # Expected: [150, 25], Test Passed
]



user_solution = lcmAndGcd
solution = lcmAndGcd_answer",GCD of two numbers
Add two fractions,"You are given four numbers num1, den1, num2, and den2. You need to find (num1/den1)+(num2/den2) and output the result in the form of (numx/denx).
Input Format:
The first line of input contains an integer T denoting the number of test cases . Then T test cases follow . Each test case contains four integers num1, den1, num2, den2 respectively .
Output Format:
For each test case, in a new line,  output will be the fraction in the form a/b where the fraction denotes the sum of the two given fractions in reduced form.
Your Task:
Since this is a function problem, you don't need to worry about the testcases. Your task is to complete the function addFraction  which adds the two fractions and prints the resulting fraction. The function takes four arguments num1, den1, num2, den2 where num1, num2 denotes the numerators of two fractions and den1, den2 denotes their denominators.
Constraints:
1 <= T <= 100
1 <= den1,den2,num1,num2 <= 1000
Example:
Input
1
1 500 2 500
Output
3/500
Explanation:
In above test case 1/500+2/500=3/500
 
Note:The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.
","def addFraction(num1, den1, num2, den2):
    """"""
    type num1: int
    type den1: int
    type num2: int
    type den2: int
    """"""
    pass

","def gcd(a, b):
    if a == 0:
        return b
    return gcd(b % a, a)


def addFraction_answer(num1, den1, num2, den2):
    """"""
    type num1: int
    type den1: int
    type num2: int
    type den2: int
    """"""
    den3 = gcd(den1, den2)
    den3 = (den1 * den2) // den3
    num3 = (num1) * (den3 // den1) + (num2) * (den3 // den2)

    cf = gcd(num3, den3)
    den3 = den3 // cf
    num3 = num3 // cf
    print(""%d/%d"" % (num3, den3))
","test_cases = [
    (1, 500, 2, 500),  # Expected: 3/500, Test Passed
    (1, 2, 1, 3),  # Expected: 5/6, Test Passed
    (3, 4, 5, 6),  # Expected: 19/12, Test Passed
    (0, 1, 1, 2),  # Expected: 1/2, Test Passed
    (10, 20, 10, 30),  # Expected: 1/1, Test Passed
    (7, 13, 14, 13),  # Expected: 21/13, Test Passed
    (1, 1, 1, 1),  # Expected: 2/1, Test Passed
    (2, 0, 3, 4),  # Expected: Error/Failure, Invalid input (denominator = 0)
    (10, 15, 20, 25),  # Expected: 2/1, Test Passed
    (1000, 250, 500, 125)  # Expected: 9/2, Test Passed
]




user_solution = addFraction
solution = addFraction_answer",GCD of two numbers
GCD of Array,"Given an array of N positive integers, find GCD of all the array elements.
Example 1:
Input: N = 3, arr[] = {2, 4, 6}
Output: 2
Explanation: GCD of 2,4,6 is 2.
Example 2:
Input: N = 1, arr[] = {1}
Output: 1
Explanation: Greatest common divisor of
all the numbers is 1.
Your Task:  
You don't need to read input or print anything. Complete the function gcd()which takes N and array as input parameters and returns the gcd.
Expected Time Complexity: O(N logN)
Expected Auxiliary Space: O(1)
Constraints:
1 ≤ N, arr[i] ≤ 105
","def gcd(N, arr):
    """"""
    type N: int
    type arr: List[int]
    type return: int
    """"""
    pass

","import math

def gcd_answer(N, arr):
    """"""
    type N: int
    type arr: List[int]
    type return: int
    """"""
    ans = arr[0]

    # iterating from 2nd number to Nth number.
    for i in range(1, N):
        # using inbuilt function to calculate gcd of two numbers.
        ans = math.gcd(ans, arr[i])

    # returning gcd of all N numbers.
    return ans

","test_cases = [
    (3, [2, 4, 6]),  # Expected: 2, Test Passed
    (1, [1]),  # Expected: 1, Test Passed
    (4, [5, 10, 15, 20]),  # Expected: 5, Test Passed
    (5, [13, 26, 39, 52, 65]),  # Expected: 13, Test Passed
    (2, [9, 27]),  # Expected: 9, Test Passed
    (3, [7, 14, 21]),  # Expected: 7, Test Passed
    (4, [8, 16, 32, 64]),  # Expected: 8, Test Passed
    (3, [101, 202, 303]),  # Expected: 101, Test Passed
    (2, [5, 7]),  # Expected: 1, Test Passed
    (3, [0, 6, 9]),  # Expected: Error/Failure, Invalid input (contains zero)
]


user_solution = gcd
solution = gcd_answer",GCD of two numbers
Second Largest,"Given an array arr, return the second largest distinct element from an array. If the second largest element doesn't exist then return -1.
Examples:
Input: arr = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
Input: arr = [10, 10]
Output: -1
Explanation: The largest element of the array is 10 and the second largest element does not exist so answer is -1.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
Constraints:
2 ≤ arr.size() ≤ 105
1 ≤ arri ≤ 105
","def print2largest(arr):
    """"""
    type arr: List[int]
    type return: int
    """"""
    pass
","def print2largest_answer(arr):
    """"""
    type arr: List[int]
    type return: int
    """"""
    n = len(arr)
    if n < 2:
        return -1

    first = second = float('-inf')
    for num in arr:
        if num > first:
            second = first
            first = num
        elif num > second and num != first:
            second = num

    if second == float('-inf'):
        return -1
    else:
        return second

","test_cases = [
    ([12, 35, 1, 10, 34, 1]),  # Expected: 34, Test Passed
    ([10, 10]),  # Expected: -1, Test Passed
    ([5, 20, 10, 15]),  # Expected: 15, Test Passed
    ([7, 7, 7, 7]),  # Expected: -1, Test Passed
    ([100, 200, 300, 400, 500]),  # Expected: 400, Test Passed
    ([1]),  # Expected: -1, Test Passed (Single element, no second largest)
    ([2, 2, 3, 3, 3, 4]),  # Expected: 3, Test Passed
    ([1, 2]),  # Expected: 1, Test Passed
    ([0, 0, 0]),  # Expected: -1, Test Passed (All elements are the same)
    ([])  # Expected: -1, Test Passed (Empty array)
]


user_solution = print2largest
solution = print2largest_answer",Min and Max in Array
Rotate Array,"Given an unsorted array arr[] of size n. Rotate the array to the left (counter-clockwise direction) by d steps, where d is a positive integer. 
Note: Consider the array as circular.
Examples :
Input: n = 5, d = 2 arr[] = {1,2,3,4,5}
Output: 3 4 5 1 2
Explanation: 1 2 3 4 5  when rotated by 2 elements, it becomes 3 4 5 1 2.
Input: n = 10, d = 3 arr[] = {2,4,6,8,10,12,14,16,18,20}
Output: 8 10 12 14 16 18 20 2 4 6
Explanation: 2 4 6 8 10 12 14 16 18 20 when rotated by 3 elements, it becomes 8 10 12 14 16 18 20 2 4 6.
Your Task:
You need not print or read anything. You need to complete the function rotateArr() which takes the array, d, and n as input parameters and rotates the array by d elements. The array must be modified in-place without using extra space.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)
Constraints:
1 <= n <= 106
1 <= d <= 106
0 <= arr[i] <= 105
","def rotateArr( arr, d, n):
    """"""
    type n: int
    type d: int
    type arr: List[int]
    type return: List[int]
    """"""
    pass
","def rotateArr_answer(arr, d, n):
    """"""
    type n: int
    type d: int
    type arr: List[int]
    type return: List[int]
    """"""
    d %= n
    # First reversing d elements from starting index.
    arr[0:d] = reversed(arr[0:d])
    
    # Then reversing the last n-d elements.
    arr[d:n] = reversed(arr[d:n])
    
    # Finally, reversing the whole array.
    arr[0:n] = reversed(arr[0:n])
","test_cases = [
    ([1, 2, 3, 4, 5], 2, 5),  # Expected: [3, 4, 5, 1, 2], Test Passed
    ([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 3, 10),  # Expected: [8, 10, 12, 14, 16, 18, 20, 2, 4, 6], Test Passed
    ([1, 2, 3], 3, 3),  # Expected: [1, 2, 3], Test Passed
    ([1, 2, 3], 0, 3),  # Expected: [1, 2, 3], Test Passed
    ([1, 2, 3, 4, 5], 1, 5),  # Expected: [2, 3, 4, 5, 1], Test Passed
    ([1, 2, 3, 4, 5], 5, 5),  # Expected: [1, 2, 3, 4, 5], Test Passed
    ([1, 2, 3, 4, 5], 7, 5),  # Expected: [3, 4, 5, 1, 2], Test Passed (d > n)
    ([10, 20, 30], 1, 3),  # Expected: [20, 30, 10], Test Passed
    ([1], 1, 1),  # Expected: [1], Test Passed (Single element array)
    ([], 1, 0)  # Expected: Error/Failure, Invalid input (empty array)
]



user_solution = rotateArr
solution = rotateArr_answer",Min and Max in Array
Count of smaller elements,"Given an unsorted array arr. Find the count of elements less than or equal to the given element x.
Examples:
Input: x = 9, arr = [10, 1, 2, 8, 4, 5] 
Output: 5
Explanation: The 5 elements are 1, 2, 8, 4 and 5.
Input: x = 2, arr = [1, 2, 2, 5, 7, 2, 9] 
Output: 4
Explanation: The 4 elements are 1, 2, 2 and 2.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
Constraints:
1 <= arr.size() <= 105
1 <= ai <= 105
0 <= x <= 105
","def countOfElements(x, arr):
    """"""
    type n: int
    type d: int
    type arr: List[int]
    type return: int
    """"""
    pass
","def countOfElements_answer(x, arr):
    """"""
    type x: int
    type arr: List[int]
    type return: int
    """"""
    count = 0  # Initialize count variable

    # Iterate through the array
    for i in arr:
        if i <= x:
            count += 1  # Increment count if current element is less than or equal to x

    return count  # Return the count of elements

","test_cases = [
    (9, [10, 1, 2, 8, 4, 5]),  # Expected: 5, Test Passed
    (2, [1, 2, 2, 5, 7, 2, 9]),  # Expected: 4, Test Passed
    (5, [5, 5, 5, 5]),  # Expected: 4, Test Passed
    (0, [1, 2, 3, 4, 5]),  # Expected: 0, Test Passed
    (10, [10, 20, 30, 40]),  # Expected: 1, Test Passed
    (100, [1, 50, 100, 150]),  # Expected: 3, Test Passed
    (5, [2, 4, 6, 8, 10]),  # Expected: 2, Test Passed
    (1, [1, 1, 1, 1, 1]),  # Expected: 5, Test Passed
    (50, [25, 50, 75]),  # Expected: 2, Test Passed
    (3, [])  # Expected: 0, Test Passed (Empty array)
]




user_solution = countOfElements
solution = countOfElements_answer",Min and Max in Array
Anagram,"Given two strings a and b consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, act and tac are an anagram of each other. Strings a and b can only contain lower case alphabets.
Note:-
Example 1:
Input:a = geeksforgeeks, b = forgeeksgeeks
Output: YES
Explanation: Both the string have same characters with
 same frequency. So, both are anagrams.
Example 2:
Input:a = allergy, b = allergic
Output: NO
Explanation: Characters in both the strings are 
  not same, so they are not anagrams.
Your Task:
You don't need to read input or print anything. Your task is to complete the function isAnagram() which takes the string a and string b as input parameter and check if the two strings are an anagram of each other. The function returns true if the strings are anagram else it returns false.
Expected Time Complexity:O(|a|+|b|).
Expected Auxiliary Space: O(Number of distinct characters).
Constraints:
1 ≤ |a|,|b| ≤ 105
","def isAnagram(a, b):
    """"""
    type a: str
    type b: str
    type return: bool
    """"""
    pass
","import sys

sys.setrecursionlimit(10**6)

def isAnagram_answer(a, b):
    """"""
    type a: str
    type b: str
    type return: bool
    """"""
    # an array of size 26, to store count of characters.
    mp = {}
    
    # storing count of each character in first string.
    for i in a:
        if i in mp.keys():
            mp[i] += 1
        else:
            mp[i] = 1
    
    # decrementing the count of characters encountered in the second string.
    for i in b:
        if i not in mp.keys():
            return False
        else:
            mp[i] -= 1
    
    # iterating over the array in which we stored the count initially
    # to check if count at every index is equal to 0 or not.
    # count 0 indicates that number of characters in both strings are same.
    for i in mp.keys():
        if mp[i] != 0:
            return False
    
    # returning the result.       
    return True

","test_cases = [
    (""geeksforgeeks"", ""forgeeksgeeks""),  # Expected: True, Test Passed
    (""allergy"", ""allergic""),  # Expected: False, Test Passed
    (""listen"", ""silent""),  # Expected: True, Test Passed
    (""triangle"", ""integral""),  # Expected: True, Test Passed
    (""rat"", ""car""),  # Expected: False, Test Passed
    (""abc"", ""cba""),  # Expected: True, Test Passed
    (""aabbcc"", ""bbaacc""),  # Expected: True, Test Passed
    (""abcd"", ""dcba""),  # Expected: True, Test Passed
    (""aabbc"", ""abbcc""),  # Expected: False, Test Passed
    ("""", """")  # Expected: True, Test Passed
]





user_solution = isAnagram
solution = isAnagram_answer",Palindrome String
Anagram Palindrome,"Given a string S, Check if characters of the given string can be rearranged to form a palindrome.
Note: You have to return 1 if it is possible to convert the given string into palindrome else return 0. 
Example 1:
Input:
S = ""geeksogeeks""
Output: Yes
Explanation: The string can be converted
into a palindrome: geeksoskeeg
Example 2:
Input: 
S = ""geeksforgeeks""
Output: No
Explanation: The given string can't be
converted into a palindrome.
Your Task:
You don't need to read input or print anything. Your task is to complete the function isPossible() which takes the string S as input and returns 1 if the string can be converted into a palindrome. Else, it returns 0.
Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(Distinct Characters).
Constraints:
1 <= |S| <= 106
","def isPossible(S):
    """"""
    type S: str
    type return: int
    """"""
    pass
","def isPossible_answer(S):
    """"""
    type S: str
    type return: int
    """"""
    m = {}
    # counting the frequency of all characters
    for char in S:
        m[char] = m.get(char, 0) + 1
    
    # if there are more than 1 characters with odd occurrence, 
    # then the palindrome is not possible
    # else, it is possible
    odd_freq = 0
    for count in m.values():
        if count % 2 == 1:
            odd_freq += 1
        if odd_freq > 1:
            return 0
    return 1


","test_cases = [
    (""geeksogeeks"",),  # Expected: 1, Test Passed
    (""geeksforgeeks"",),  # Expected: 0, Test Passed
    (""aabbcc"",),  # Expected: 1, Test Passed
    (""abc"",),  # Expected: 0, Test Passed
    (""aaa"",),  # Expected: 1, Test Passed
    (""racecar"",),  # Expected: 1, Test Passed
    ("""",),  # Expected: 1, Test Passed
    (""aabbccddeeffg"",),  # Expected: 1, Test Passed
    (""abcdefg"",),  # Expected: 0, Test Passed
    (""aaaaaa"",)  # Expected: 1, Test Passed
]


user_solution = isPossible
solution = isPossible_answer",Palindrome String
Anagram of String,"Given two strings S1 and S2 in lowercase, the task is to make them anagram. The only allowed operation is to remove a character from any string. Find the minimum number of characters to be deleted to make both the strings anagram. Two strings are called anagram of each other if one of them can be converted into another by rearranging its letters.
Example 1:
Input:
S1 = bcadeh
S2 = hea
Output: 3
Explanation: We need to remove b, c
and d from S1.
Example 2:
Input:
S1 = cddgk
S2 = gcd
Output: 2
Explanation: We need to remove d and
k from S1.
Your Task:
Complete the function remAnagram() which takes two strings S1, S2 as input parameter, and returns minimum characters needs to be deleted.
Expected Time Complexity: O(max(|S1|, |S2|)), where |S| = length of string S.
Expected Auxiliary Space: O(26)
Constraints:
1 <= |S1|, |S2| <= 105
","def remAnagram(S1, S2):
    """"""
    type S1: str
    type S2: str
    type return: int
    """"""
    pass
","def remAnagram_answer(S1, S2):
    """"""
    type S1: str
    type S2: str
    type return: int
    """"""
    count1 = [0] * 26  # creating an array to store the count of each letter in str1
    count2 = [0] * 26  # creating an array to store the count of each letter in str2

    for i in range(len(S1)):
        count1[ord(S1[i]) - ord('a')] += 1  # incrementing the count of each letter in str1

    for i in range(len(S2)):
        count2[ord(S2[i]) - ord('a')] += 1  # incrementing the count of each letter in str2

    result = 0

    for i in range(26):
        result += abs(count1[i] - count2[i])  # calculating the absolute difference of counts

    return result

","test_cases = [
    (""bcadeh"", ""hea""),  # Expected: 3, Test Passed
    (""cddgk"", ""gcd""),  # Expected: 2, Test Passed
    (""abcd"", ""efgh""),  # Expected: 8, Test Passed
    (""hello"", ""billion""),  # Expected: 6, Test Passed
    (""anagram"", ""manga""),  # Expected: 3, Test Passed
    (""test"", ""tset""),  # Expected: 0, Test Passed
    ("""", """"),  # Expected: 0, Test Passed
    (""abc"", ""def""),  # Expected: 6, Test Passed
    (""listen"", ""silent""),  # Expected: 0, Test Passed
    (""abcdef"", ""ghijkl"")  # Expected: 12, Test Passed
]



user_solution = remAnagram
solution = remAnagram_answer",Palindrome String
Uncommon characters,"Given two strings A and B consisting of lowercase english characters. Find the characters that are not common in the two strings. 
Note :- Return the string in sorted order.
Example 1:
Input:
A = geeksforgeeks
B = geeksquiz
Output: fioqruz
Explanation: 
The characters 'f', 'i', 'o', 'q', 'r', 'u','z' 
are either present in A or B, but not in both.
Example 2:
Input:
A = characters
B = alphabets
Output: bclpr
Explanation: The characters 'b','c','l','p','r' 
are either present in A or B, but not in both.
Your Task:  
You dont need to read input or print anything. Complete the function UncommonChars() which takes strings A and B as input parameters and returns a string that contains all the uncommon characters in sorted order. If no such character exists return ""-1"".
Expected Time Complexity: O(M+N) where M and N are the sizes of A and B respectively.
Expected Auxiliary Space: O(M+N)  
Constraints:
1<= M,N <= 104
String may contain duplicate characters.
 
","def uncommonChars(A, B):
    """"""
    type A: str
    type B: str
    type return: str
    """"""
    pass
","def uncommonChars_answer(A, B):
    """"""
    type A: str
    type B: str
    type return: str
    """"""
    res = ''

    # creating a list to keep track of presence of characters.
    present = [0] * 26

    # iterating over first string and marking presence of each character.
    for e in A:
        present[ord(e) - ord('a')] = 1

    # iterating over second string and updating presence list accordingly.
    for e in B:
        if present[ord(e) - ord('a')] == 1 or present[ord(e) - ord('a')] == -1:
            present[ord(e) - ord('a')] = -1
        else:
            present[ord(e) - ord('a')] = 2

    res = ''

    # iterating over the presence list to get the uncommon characters.
    for i, e in enumerate(present):
        if e == 1 or e == 2:
            res += chr(i + ord('a'))
    
    # returning the result.
    if res:
        return res
    else:
        return ""-1""

","test_cases = [
    (""geeksforgeeks"", ""geeksquiz""),  # Expected: ""fioqruz"", Test Passed
    (""characters"", ""alphabets""),  # Expected: ""bclpr"", Test Passed
    (""abc"", ""def""),  # Expected: ""abcdef"", Test Passed
    ("""", """"),  # Expected: ""-1"", Test Passed (Both strings are empty)
    (""abc"", """"),  # Expected: ""abc"", Test Passed (One string is empty)
    ("""", ""xyz""),  # Expected: ""xyz"", Test Passed (One string is empty)
    (""abcdef"", ""abcdef""),  # Expected: ""-1"", Test Passed (Both strings are identical)
    (""aaa"", ""bbb""),  # Expected: ""ab"", Test Passed
    (""abcd"", ""abef""),  # Expected: ""cdef"", Test Passed
    (""geek"", ""geeky"")  # Expected: ""y"", Test Passed
]

user_solution = uncommonChars
solution = uncommonChars_answer",Check for subsequence
Non Repeating Character,"Given a string s consisting of lowercase Latin Letters. Return the first non-repeating character in s. If there is no non-repeating character, return '$'.
Note : When you return '$' driver code will output -1.
Examples:
Input:
s = hello
Output: h
Explanation: In the given string, the first character which is non-repeating is h, as it appears first and there is no other 'h' in the string.
Input:
s = zxvczbtxyzvy
Output: c
Explanation: In the given string, 'c' is the character which is non-repeating.
Expected Time Complexity: O(n).
Expected Auxiliary Space: O(Number of distinct characters).
Note: n = |S|
Constraints:
1 <= n <= 105
 
","def nonRepeatingCharacter(s):
    """"""
    type s: str
    type return: str
    """"""
    pass
","def nonRepeatingCharacter_answer(s):
    """"""
    type s: str
    type return: str
    """"""
    # using hash table to store count of each character.
    occurences = [0 for i in range(256)]
    
    # iterating over the string.
    for char in s:
        occurences[ord(char)] += 1
    
    for i in range(len(s)):
        # if count of current character is 1, we return it.
        if occurences[ord(s[i])] == 1:
            return s[i]
    
    # if there is no non-repeating character then we return '$'.
    return '$'

","test_cases = [
    (""hello"",),  # Expected: ""h"", Test Passed
    (""zxvczbtxyzvy"",),  # Expected: ""c"", Test Passed
    (""abcdef"",),  # Expected: ""a"", Test Passed
    (""aabbcc"",),  # Expected: ""$"", Test Passed
    (""racecar"",),  # Expected: ""e"", Test Passed
    (""aabbc"",),  # Expected: ""c"", Test Passed
    ("""",),  # Expected: ""$"", Test Passed (Empty string)
    (""zzzyyyxxx"",),  # Expected: ""$"", Test Passed
    (""geeksforgeeks"",),  # Expected: ""f"", Test Passed
    (""abcdefgabcdefg"",)  # Expected: ""$"", Test Passed
]



user_solution = nonRepeatingCharacter
solution = nonRepeatingCharacter_answer",Check for subsequence
Multiply two strings,"Given two numbers as strings s1 and s2. Calculate their Product.

Note: The numbers can be negative and You are not allowed to use any built-in function or convert the strings to integers. There can be zeros in the begining of the numbers. You don't need to specify '+' sign in the begining of positive numbers.
Example 1:
Input:
s1 = ""0033""
s2 = ""2""
Output:
66
Example 2:
Input:
s1 = ""11""
s2 = ""23""
Output:
253
Your Task: You don't need to read input or print anything. Your task is to complete the function multiplyStrings() which takes two strings s1 and s2 as input and returns their product as a string.

Expected Time Complexity: O(n1* n2)
Expected Auxiliary Space: O(n1 + n2); where n1 and n2 are sizes of strings s1 and s2 respectively.
Constraints:
1 ≤ length of s1 and s2 ≤ 103
","def multiplyStrings(s1, s2):
    """"""
    type s1: str
    type s2: str
    type return: str
    """"""
    pass
","def multiplyStrings_answer(s1, s2):
    """"""
    type s1: str
    type s2: str
    type return: str
    """"""
    # Checking if either of the strings is zero
    if s1 == '0' or s2 == '0':
        return '0'
    
    # Setting s1 variable to keep track of the sign of the product
    negative = False
    # Checking if the first string is negative
    if s1[0] == '-':
        negative = not negative
        s1 = s1[1:]
    
    # Checking if the second string is negative
    if s2[0] == '-':
        negative = not negative
        s2 = s2[1:]
    
    # Initializing s1 list to store the product
    product = [0 for _ in range(len(s1) + len(s2))]
    
    # Multiplying each digit of the second string with each digit of the first string
    for i in range(len(s2) - 1, -1, -1):
        digit1 = int(s2[i])
        carry = 0
        
        # Iterating over each digit of the first string
        for j in range(len(s1) - 1, -1, -1):
            digit2 = int(s1[j])
            
            # Adding the product of the digits with the carry
            product[i + j + 1] += digit1 * digit2 + carry
            carry = product[i + j + 1] // 10
            product[i + j + 1] = product[i + j + 1] % 10
        
        # Handling any remaining carry
        nextIndex = i
        while carry:
            product[nextIndex] += carry
            carry = product[nextIndex] // 10
            product[nextIndex] = product[nextIndex] % 10
            nextIndex -= 1
    
    # Converting the product list to s1 string
    res = ''.join(str(x) for x in product)
    
    # Removing leading zeroes from the product
    zeroes = 0
    while zeroes < len(res) - 1 and res[zeroes] == '0':
        zeroes += 1
    res = res[zeroes:]
    
    # Adding the negative sign if necessary
    if negative and res != ""0"":
        res = '-' + res
    
    # Returning the final product
    return res

","test_cases = [
    (""0033"", ""2""),  # Expected: ""66"", Test Passed
    (""11"", ""23""),  # Expected: ""253"", Test Passed
    (""-11"", ""23""),  # Expected: ""-253"", Test Passed
    (""0"", ""12345""),  # Expected: ""0"", Test Passed
    (""123"", ""0""),  # Expected: ""0"", Test Passed
    (""-123"", ""-456""),  # Expected: ""56088"", Test Passed
    (""00012"", ""00034""),  # Expected: ""408"", Test Passed
    (""999"", ""999""),  # Expected: ""998001"", Test Passed
    (""1"", ""1""),  # Expected: ""1"", Test Passed
    (""123456789"", ""987654321"")  # Expected: ""121932631112635269"", Test Passed
]


user_solution = multiplyStrings
solution = multiplyStrings_answer",Check for subsequence
